// Terraria SDK CodeGen
// This code was generated by the program, and it's normally if there are warnings.

using Ruby.Network.Comfortable.Models;

namespace Ruby.Network.Comfortable.Packets;

internal class WorldInfoPacket : IPacket<WorldInfo>
{
   public int PacketID => 7;
   public WorldInfo Deserialize(byte[] data)
   {
       using MemoryStream stream = new MemoryStream(data);
       using BinaryReader reader = new BinaryReader(stream);
       
       Int32 time = reader.ReadInt32();
       Byte timeFlags = reader.ReadByte();
       Byte moonPhase = reader.ReadByte();
       Int16 maxTilesX = reader.ReadInt16();
       Int16 maxTilesY = reader.ReadInt16();
       Int16 spawnTileX = reader.ReadInt16();
       Int16 spawnTileY = reader.ReadInt16();
       Int16 worldSurface = reader.ReadInt16();
       Int16 rockLayer = reader.ReadInt16();
       Int32 worldId = reader.ReadInt32();
       String worldName = reader.ReadString();
       Byte gameMode = reader.ReadByte();
       Byte uniqueID = reader.ReadByte();
       UInt64 worldGenVersion = reader.ReadUInt64();
       Byte moonType = reader.ReadByte();
       Byte bG1 = reader.ReadByte();
       Byte bG2 = reader.ReadByte();
       Byte bG3 = reader.ReadByte();
       Byte bG4 = reader.ReadByte();
       Byte bG5 = reader.ReadByte();
       Byte bG6 = reader.ReadByte();
       Byte bG7 = reader.ReadByte();
       Byte bG8 = reader.ReadByte();
       Byte bG9 = reader.ReadByte();
       Byte bG10 = reader.ReadByte();
       Byte bG11 = reader.ReadByte();
       Byte bG12 = reader.ReadByte();
       Byte bG13 = reader.ReadByte();
       Byte iceBackStyle = reader.ReadByte();
       Byte jungleBackStyle = reader.ReadByte();
       Byte hellBackStyle = reader.ReadByte();
       Single windSpeedTarget = reader.ReadSingle();
       Byte numClouds = reader.ReadByte();
       Int32 treeX1 = reader.ReadInt32();
       Int32 treeX2 = reader.ReadInt32();
       Int32 treeX3 = reader.ReadInt32();
       Byte treeStyle1 = reader.ReadByte();
       Byte treeStyle2 = reader.ReadByte();
       Byte treeStyle3 = reader.ReadByte();
       Byte treeStyle4 = reader.ReadByte();
       Int32 caveBackX1 = reader.ReadInt32();
       Int32 caveBackX2 = reader.ReadInt32();
       Int32 caveBackX3 = reader.ReadInt32();
       Byte caveBackStyle1 = reader.ReadByte();
       Byte caveBackStyle2 = reader.ReadByte();
       Byte caveBackStyle3 = reader.ReadByte();
       Byte caveBackStyle4 = reader.ReadByte();
       Byte treeForest1 = reader.ReadByte();
       Byte treeForest2 = reader.ReadByte();
       Byte treeForest3 = reader.ReadByte();
       Byte treeForest4 = reader.ReadByte();
       Byte treeCorruption = reader.ReadByte();
       Byte treeJungle = reader.ReadByte();
       Byte treeSnow = reader.ReadByte();
       Byte treeHallow = reader.ReadByte();
       Byte treeCrimson = reader.ReadByte();
       Byte treeDesert = reader.ReadByte();
       Byte treeOcean = reader.ReadByte();
       Byte treeMushroom = reader.ReadByte();
       Byte treeUnderworld = reader.ReadByte();
       Single maxRaining = reader.ReadSingle();
       WorldInfo1 info1 = reader.Read<WorldInfo1>();
       WorldInfo2 info2 = reader.Read<WorldInfo2>();
       WorldInfo3 info3 = reader.Read<WorldInfo3>();
       WorldInfo4 info4 = reader.Read<WorldInfo4>();
       WorldInfo5 info5 = reader.Read<WorldInfo5>();
       WorldInfo6 info6 = reader.Read<WorldInfo6>();
       WorldInfo7 info7 = reader.Read<WorldInfo7>();
       WorldInfo8 wInfo8 = reader.Read<WorldInfo8>();
       WorldInfo9 info9 = reader.Read<WorldInfo9>();
       WorldInfo10 info10 = reader.Read<WorldInfo10>();
       Int16 copperTier = reader.ReadInt16();
       Int16 ironTier = reader.ReadInt16();
       Int16 silverTier = reader.ReadInt16();
       Int16 goldTier = reader.ReadInt16();
       Int16 cobaltTier = reader.ReadInt16();
       Int16 mythrilTier = reader.ReadInt16();
       Int16 adamantiteTier = reader.ReadInt16();
       SByte invasionType = reader.ReadSByte();
       UInt64 lobbyID = reader.ReadUInt64();
       Single sandstormSeverity = reader.ReadSingle();
       
       return new()
       {
           Time = time,
           TimeFlags = timeFlags,
           MoonPhase = moonPhase,
           MaxTilesX = maxTilesX,
           MaxTilesY = maxTilesY,
           SpawnTileX = spawnTileX,
           SpawnTileY = spawnTileY,
           WorldSurface = worldSurface,
           RockLayer = rockLayer,
           WorldId = worldId,
           WorldName = worldName,
           GameMode = gameMode,
           UniqueID = uniqueID,
           WorldGenVersion = worldGenVersion,
           MoonType = moonType,
           BG1 = bG1,
           BG2 = bG2,
           BG3 = bG3,
           BG4 = bG4,
           BG5 = bG5,
           BG6 = bG6,
           BG7 = bG7,
           BG8 = bG8,
           BG9 = bG9,
           BG10 = bG10,
           BG11 = bG11,
           BG12 = bG12,
           BG13 = bG13,
           IceBackStyle = iceBackStyle,
           JungleBackStyle = jungleBackStyle,
           HellBackStyle = hellBackStyle,
           WindSpeedTarget = windSpeedTarget,
           NumClouds = numClouds,
           TreeX1 = treeX1,
           TreeX2 = treeX2,
           TreeX3 = treeX3,
           TreeStyle1 = treeStyle1,
           TreeStyle2 = treeStyle2,
           TreeStyle3 = treeStyle3,
           TreeStyle4 = treeStyle4,
           CaveBackX1 = caveBackX1,
           CaveBackX2 = caveBackX2,
           CaveBackX3 = caveBackX3,
           CaveBackStyle1 = caveBackStyle1,
           CaveBackStyle2 = caveBackStyle2,
           CaveBackStyle3 = caveBackStyle3,
           CaveBackStyle4 = caveBackStyle4,
           TreeForest1 = treeForest1,
           TreeForest2 = treeForest2,
           TreeForest3 = treeForest3,
           TreeForest4 = treeForest4,
           TreeCorruption = treeCorruption,
           TreeJungle = treeJungle,
           TreeSnow = treeSnow,
           TreeHallow = treeHallow,
           TreeCrimson = treeCrimson,
           TreeDesert = treeDesert,
           TreeOcean = treeOcean,
           TreeMushroom = treeMushroom,
           TreeUnderworld = treeUnderworld,
           MaxRaining = maxRaining,
           Info1 = info1,
           Info2 = info2,
           Info3 = info3,
           Info4 = info4,
           Info5 = info5,
           Info6 = info6,
           Info7 = info7,
           WInfo8 = wInfo8,
           Info9 = info9,
           Info10 = info10,
           CopperTier = copperTier,
           IronTier = ironTier,
           SilverTier = silverTier,
           GoldTier = goldTier,
           CobaltTier = cobaltTier,
           MythrilTier = mythrilTier,
           AdamantiteTier = adamantiteTier,
           InvasionType = invasionType,
           LobbyID = lobbyID,
           SandstormSeverity = sandstormSeverity,
       };
   }
   public byte[] Serialize(WorldInfo data)
   {
       return new PacketWriter().SetType(7)
           .PackInt32(data.Time)
           .PackByte(data.TimeFlags)
           .PackByte(data.MoonPhase)
           .PackInt16(data.MaxTilesX)
           .PackInt16(data.MaxTilesY)
           .PackInt16(data.SpawnTileX)
           .PackInt16(data.SpawnTileY)
           .PackInt16(data.WorldSurface)
           .PackInt16(data.RockLayer)
           .PackInt32(data.WorldId)
           .PackString(data.WorldName)
           .PackByte(data.GameMode)
           .PackByte(data.UniqueID)
           .PackUInt64(data.WorldGenVersion)
           .PackByte(data.MoonType)
           .PackByte(data.BG1)
           .PackByte(data.BG2)
           .PackByte(data.BG3)
           .PackByte(data.BG4)
           .PackByte(data.BG5)
           .PackByte(data.BG6)
           .PackByte(data.BG7)
           .PackByte(data.BG8)
           .PackByte(data.BG9)
           .PackByte(data.BG10)
           .PackByte(data.BG11)
           .PackByte(data.BG12)
           .PackByte(data.BG13)
           .PackByte(data.IceBackStyle)
           .PackByte(data.JungleBackStyle)
           .PackByte(data.HellBackStyle)
           .PackSingle(data.WindSpeedTarget)
           .PackByte(data.NumClouds)
           .PackInt32(data.TreeX1)
           .PackInt32(data.TreeX2)
           .PackInt32(data.TreeX3)
           .PackByte(data.TreeStyle1)
           .PackByte(data.TreeStyle2)
           .PackByte(data.TreeStyle3)
           .PackByte(data.TreeStyle4)
           .PackInt32(data.CaveBackX1)
           .PackInt32(data.CaveBackX2)
           .PackInt32(data.CaveBackX3)
           .PackByte(data.CaveBackStyle1)
           .PackByte(data.CaveBackStyle2)
           .PackByte(data.CaveBackStyle3)
           .PackByte(data.CaveBackStyle4)
           .PackByte(data.TreeForest1)
           .PackByte(data.TreeForest2)
           .PackByte(data.TreeForest3)
           .PackByte(data.TreeForest4)
           .PackByte(data.TreeCorruption)
           .PackByte(data.TreeJungle)
           .PackByte(data.TreeSnow)
           .PackByte(data.TreeHallow)
           .PackByte(data.TreeCrimson)
           .PackByte(data.TreeDesert)
           .PackByte(data.TreeOcean)
           .PackByte(data.TreeMushroom)
           .PackByte(data.TreeUnderworld)
           .PackSingle(data.MaxRaining)
           .PackByte((byte)data.Info1)
           .PackByte((byte)data.Info2)
           .PackByte((byte)data.Info3)
           .PackByte((byte)data.Info4)
           .PackByte((byte)data.Info5)
           .PackByte((byte)data.Info6)
           .PackByte((byte)data.Info7)
           .PackByte((byte)data.WInfo8)
           .PackByte((byte)data.Info9)
           .PackByte((byte)data.Info10)
           .PackInt16(data.CopperTier)
           .PackInt16(data.IronTier)
           .PackInt16(data.SilverTier)
           .PackInt16(data.GoldTier)
           .PackInt16(data.CobaltTier)
           .PackInt16(data.MythrilTier)
           .PackInt16(data.AdamantiteTier)
           .PackSByte(data.InvasionType)
           .PackUInt64(data.LobbyID)
           .PackSingle(data.SandstormSeverity)
           .BuildPacket();
   }
}
 
public struct WorldInfo
{
   public Int32 Time;
   public Byte TimeFlags;
   public Byte MoonPhase;
   public Int16 MaxTilesX;
   public Int16 MaxTilesY;
   public Int16 SpawnTileX;
   public Int16 SpawnTileY;
   public Int16 WorldSurface;
   public Int16 RockLayer;
   public Int32 WorldId;
   public String WorldName;
   public Byte GameMode;
   public Byte UniqueID;
   public UInt64 WorldGenVersion;
   public Byte MoonType;
   public Byte BG1;
   public Byte BG2;
   public Byte BG3;
   public Byte BG4;
   public Byte BG5;
   public Byte BG6;
   public Byte BG7;
   public Byte BG8;
   public Byte BG9;
   public Byte BG10;
   public Byte BG11;
   public Byte BG12;
   public Byte BG13;
   public Byte IceBackStyle;
   public Byte JungleBackStyle;
   public Byte HellBackStyle;
   public Single WindSpeedTarget;
   public Byte NumClouds;
   public Int32 TreeX1;
   public Int32 TreeX2;
   public Int32 TreeX3;
   public Byte TreeStyle1;
   public Byte TreeStyle2;
   public Byte TreeStyle3;
   public Byte TreeStyle4;
   public Int32 CaveBackX1;
   public Int32 CaveBackX2;
   public Int32 CaveBackX3;
   public Byte CaveBackStyle1;
   public Byte CaveBackStyle2;
   public Byte CaveBackStyle3;
   public Byte CaveBackStyle4;
   public Byte TreeForest1;
   public Byte TreeForest2;
   public Byte TreeForest3;
   public Byte TreeForest4;
   public Byte TreeCorruption;
   public Byte TreeJungle;
   public Byte TreeSnow;
   public Byte TreeHallow;
   public Byte TreeCrimson;
   public Byte TreeDesert;
   public Byte TreeOcean;
   public Byte TreeMushroom;
   public Byte TreeUnderworld;
   public Single MaxRaining;
   public WorldInfo1 Info1;
   public WorldInfo2 Info2;
   public WorldInfo3 Info3;
   public WorldInfo4 Info4;
   public WorldInfo5 Info5;
   public WorldInfo6 Info6;
   public WorldInfo7 Info7;
   public WorldInfo8 WInfo8;
   public WorldInfo9 Info9;
   public WorldInfo10 Info10;
   public Int16 CopperTier;
   public Int16 IronTier;
   public Int16 SilverTier;
   public Int16 GoldTier;
   public Int16 CobaltTier;
   public Int16 MythrilTier;
   public Int16 AdamantiteTier;
   public SByte InvasionType;
   public UInt64 LobbyID;
   public Single SandstormSeverity;
}